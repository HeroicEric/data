# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#
# | Type               | Master | Beta | Release | LTS  | Tags |
# | ---                | ---    | ---  | ---     | ---  | ---  |
# | Lint               | yes    | yes  | no      | no   | no   |
# | Basic Tests        | yes    | yes  | yes     | yes  | no   |
# | Build  Tests       | yes    | yes  | yes*    | yes* | no   |
# | Windows Tests      | yes    | yes  | yes*    | yes* | no   |
# | Floating Deps      | yes    | yes  | yes     | yes  | no   |
# | Ember LTS Branches | yes    | yes  | yes     | yes  | no   |
# | Release Channels   | yes    | yes  | no      | no   | no   |
# | External Partners  | yes    | yes  | no      | no   | no   |
#
# * Runs but skips tests for in-progress-features

trigger:
  - master
  - beta
  - release
  - release-*
  - lts-*

jobs:
  - job: Lint
    displayName: 'Lint'
    condition: |
      or(
        in(variables['Build.SourceBranchName'], 'master', 'beta'),
        in(variables['System.PullRequest.TargetBranch'], 'master', 'beta')
      )
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - task: NodeTool@0
        displayName: 'Node install'
        inputs:
          versionSpec: '10.x' # The version we're installing
      - script: yarn --frozen-lockfile
        displayName: 'Yarn install'
      - script: yarn lint:features
        displayName: 'Lint features'
      - script: yarn lint:features
        displayName: 'Lint prettier'
      - script: yarn problems
        displayName: 'Check for TypeScript problems'

  - job: BasicTests
    dependsOn: Lint
    condition: in(dependencies.Lint.result, 'Succeeded', 'Skipped')
    strategy:
      matrix:
        linux:
          vmImage: 'ubuntu-16.04'
        mac:
          vmImage: 'macOS-10.14'
        windows:
          vmImage: 'windows-2019'
    pool:
      vmImage: $(vmImage)
    steps:
      - template: '.azure/basic-tests.yml'

  - job: FloatingDependencies
    dependsOn: Lint
    condition: in(dependencies.Lint.result, 'Succeeded', 'Skipped')
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - template: '.azure/basic-tests.yml'
        parameters:
          useLockfile: false

  - job: LTS
    dependsOn: Lint
    condition: in(dependencies.Lint.result, 'Succeeded', 'Skipped')
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - template: '.azure/try-scenario.yml'
        parameters:
          scenario: ember-lts-3.8

  - job: ReleaseChannels
    condition: |
      and(
        in(dependencies.Lint.result, 'Succeeded', 'Skipped'),
        or(
          in(variables['Build.SourceBranchName'], 'master', 'beta'),
          in(variables['System.PullRequest.TargetBranch'], 'master', 'beta')
        )
      )
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        ember_release:
          scenario: ember-release
        ember_beta:
          scenario: ember-beta
        ember_canary:
          scenario: ember-canary
        ember_release_with_jquery:
          scenario: ember-release-with-jquery
    steps:
      - template: '.azure/try-scenario.yml'
        parameters:
          scenario: $(scenario)

  - job: AdditionalScenarios
    dependsOn: Lint
    condition: in(dependencies.Lint.result, 'Succeeded', 'Skipped')
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        with_ember_fetch:
          scenario: with-ember-fetch
        with_jquery:
          scenario: default-with-jquery
        with_max_transpilation:
          scenario: with-max-transpilation
    steps:
      - template: '.azure/try-scenario.yml'
        parameters:
          scenario: $(scenario)

  - job: ExternalPartners
    dependsOn:
      - BasicTests
      - FloatingDependencies
      - LTS
      - AdditionalScenarios
    condition: |
      and(
        succeeded(),
        or(
          in(variables['Build.SourceBranchName'], 'master', 'beta'),
          in(variables['System.PullRequest.TargetBranch'], 'master', 'beta')
        )
      )
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        ilios_frontend:
          partner: ilios-frontend
          allowedToFail: false
        ember_observer:
          partner: ember-observer
          allowedToFail: false
        ember_data_change_tracker:
          partner: ember-data-change-tracker
          allowedToFail: true
        ember_data_relationship_tracker:
          partner: ember-data-relationship-tracker
          allowedToFail: false
        ember_m3:
          partner: ember-m3
          allowedToFail: false
        ember_resource_metadata:
          partner: ember-resource-metadata
          allowedToFail: false
        factory_guy:
          partner: factory-guy
          allowedToFail: true
        model_fragments:
          partner: model-fragments
          allowedToFail: true
        storefront:
          partner: storefront
          allowedToFail: false
        travis_web:
          partner: travis-web
          allowedToFail: false
    steps:
      - template: '.azure/external-partner-test.yml'
        parameters:
          partner: $(partner)
          allowedToFail: $(allowedToFail)
